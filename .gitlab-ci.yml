image: teracy/angular-cli:latest

stages:
    - infrastructure
    - install
    - build
    - push
    - deployment

.libs-cache:
    tags:
        - docker
    cache:
        paths:
            - node_modules/

create_ecr_and_app_namespace:
  stage: infrastructure
  rules:
    - if: $CI_COMMIT_BRANCH == "ft-*" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"
      variables:
        tf_dir: "dev"
        AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
        AWS_DEFAULT_REGION: $DEV_AWS_DEFAULT_REGION
        region_code: $DEV_AWS_DEFAULT_REGION
        aws_account: $dev_aws_account
        environment: "dev"
    - if: $CI_COMMIT_BRANCH == "release"
      variables:
        tf_dir: "prd"
        AWS_ACCESS_KEY_ID: $PRD_AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY: $PRD_AWS_SECRET_ACCESS_KEY
        AWS_DEFAULT_REGION: $PRD_AWS_DEFAULT_REGION
        region_code: $PRD_AWS_DEFAULT_REGION
        aws_account: $prd_aws_account
        environment: "prd"
  image:
    name: ubuntu:latest
    entrypoint: ['']
  before_script:
    - apt-get update && apt-get install curl unzip git wget coreutils openssl zip -y
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install --update
    - curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_arm64
    - chmod +x ./aws-iam-authenticator
    - mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
    - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
    - wget https://releases.hashicorp.com/terraform/1.3.6/terraform_1.3.6_linux_amd64.zip
    - unzip terraform_1.3.6_linux_amd64.zip
    - mv terraform /usr/bin/terraform
    - curl -L https://git.io/get_helm.sh | bash -s -- --version v3.8.2
    - curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
    - mv /tmp/eksctl /usr/local/bin
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
  script:
    - cd "IaaC/$tf_dir"
    - terraform init
    - terraform plan
    - terraform apply --auto-approve -target=module.kubeconfig -target=module.client_ecr -target=module.client_namespace
  when: on_success

install:
    stage: install
    extends: .libs-cache
    script:
        - apt-get update
        - apt-get install libgnutls30 -y
        - npm i

build-web-ssr:
    stage: build
    tags:
        - docker 
    cache:
        paths:
            - dist/
            - node_modules/
    except:
        - release
    artifacts:
        expire_in: 1 day
        paths:
            - dist/
    script:
        - apt-get update
        - apt-get install libgnutls30 -y
        - npm install --save-dev @angular-devkit/build-angular
        - npm run build:static

build-web-release:
    stage: build
    tags:
        - docker
    cache:
        paths:
            - dist/
            - node_modules/
    only:
        - release
    artifacts:
        expire_in: 1 day
        paths:
            - dist/
    script:
        - apt-get update
        - apt-get install libgnutls30 -y
        - npm install --save-dev @angular-devkit/build-angular
        - npm run build:release

deploy-test:
    stage: push
    services:
        - docker:20.10.11-dind
    image: docker:20.10.11-dind
    rules:
      - if: $CI_COMMIT_BRANCH == "ft-*" || $CI_COMMIT_BRANCH == "develop"
        variables:
          tf_dir: "dev"
          AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
          AWS_DEFAULT_REGION: $DEV_AWS_DEFAULT_REGION
          region_code: $DEV_AWS_DEFAULT_REGION
          aws_account: $dev_aws_account
          environment: "dev"
    cache:
        paths:
            - dist/
    before_script:
      - apk add aws-cli
    script:
        - CONTAINER_IMAGE="$CI_REGISTRY/$CI_PROJECT_PATH"
        - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin "$aws_account.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"
        - docker build --tag "$aws_account.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/client:$CI_COMMIT_BRANCH" .
        - docker push "$aws_account.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/client:$CI_COMMIT_BRANCH"
        - docker logout
    tags:
        - docker

deploy-latest:
    stage: push
    services:
        - docker:20.10.11-dind
    image: docker:20.10.11-dind
    rules:
      - if: $CI_COMMIT_BRANCH == "main"
        variables:
          tf_dir: "dev"
          AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
          AWS_DEFAULT_REGION: $DEV_AWS_DEFAULT_REGION
          region_code: $DEV_AWS_DEFAULT_REGION
          aws_account: $dev_aws_account
          environment: "dev"
    cache:
        paths:
            - dist/
    before_script:
      - apk add aws-cli
    script:
        - CONTAINER_IMAGE="$CI_REGISTRY/$CI_PROJECT_PATH"
        - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin "$aws_account.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"
        - docker build --tag "$aws_account.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/client:latest" .
        - docker push "$aws_account.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/client:latest"
        - docker logout
    tags:
        - docker

deploy-release:
    stage: push
    services:
        - docker:20.10.11-dind
    image: docker:20.10.11-dind
    rules:
      - if: $CI_COMMIT_BRANCH == "release"
        variables:
          tf_dir: "prd"
          AWS_ACCESS_KEY_ID: $PRD_AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY: $PRD_AWS_SECRET_ACCESS_KEY
          AWS_DEFAULT_REGION: $PRD_AWS_DEFAULT_REGION
          region_code: $PRD_AWS_DEFAULT_REGION
          aws_account: $prd_aws_account
          environment: "prd"
    cache:
        paths:
            - dist/
    before_script:
      - apk add aws-cli
    script:
        - CONTAINER_IMAGE="$CI_REGISTRY/$CI_PROJECT_PATH"
        - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin "$aws_account.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"
        - docker build --tag "$aws_account.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/client:release" .
        - docker push "$aws_account.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/client:release"
    tags:
        - docker

deploy:
  stage: deployment
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == "ft-*" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main"
      variables:
        tf_dir: "dev"
        AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
        AWS_DEFAULT_REGION: $DEV_AWS_DEFAULT_REGION
        region_code: $DEV_AWS_DEFAULT_REGION
        aws_account: $dev_aws_account
        environment: "dev"
    - if: $CI_COMMIT_BRANCH == "release"
      variables:
        tf_dir: "prd"
        AWS_ACCESS_KEY_ID: $PRD_AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY: $PRD_AWS_SECRET_ACCESS_KEY
        AWS_DEFAULT_REGION: $PRD_AWS_DEFAULT_REGION
        region_code: $PRD_AWS_DEFAULT_REGION
        aws_account: $prd_aws_account
        environment: "prd"
  image:
    name: ubuntu:latest
    entrypoint: ['']
  before_script:
    - apt-get update && apt-get install curl unzip git wget coreutils openssl zip gettext-base -y
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install --update
    - curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_arm64
    - chmod +x ./aws-iam-authenticator
    - mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
    - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
    - wget https://releases.hashicorp.com/terraform/1.3.6/terraform_1.3.6_linux_amd64.zip
    - unzip terraform_1.3.6_linux_amd64.zip
    - mv terraform /usr/bin/terraform
    - curl -L https://git.io/get_helm.sh | bash -s -- --version v3.8.2
    - curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
    - mv /tmp/eksctl /usr/local/bin
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
  script:
    - cd "IaaC/$tf_dir"
    - terraform init
    - terraform apply --auto-approve -target=module.kubeconfig
    - kubectl apply -f namespace.yaml --kubeconfig=kubeconfig
    - envsubst < Deployment-and-Service.yml | kubectl apply -f - --kubeconfig=kubeconfig
    - kubectl apply -f Ingress.yml --kubeconfig=kubeconfig